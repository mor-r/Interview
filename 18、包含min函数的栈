/*
定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。

示例:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.min();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.min();   --> 返回 -2.
 
提示：
各函数的调用总次数不超过 20000 次
*/

class MinStack {
    /*
    举例：
    入栈数据：3 3 5 8 2 1
    当前栈stack：3 3 5 8 2 1 
    辅助栈minStack：3 3 3 3 2 1 
    */

    Stack<Integer> stack;
    Stack<Integer> minStack;


    /** initialize your data structure here. */
    public MinStack() {
        stack=new Stack<Integer>();//存放当前栈
        minStack=new Stack<Integer>();//存放最小值的辅助栈
    }
    
    public void push(int x) {
        //如果辅助栈为空或者要入栈的数据x小于辅助栈的栈顶元素，则让x入栈
        if(minStack.size()==0||x<minStack.peek()){
            minStack.push(x);
        }else{
            minStack.push(minStack.peek());
        }
        //将入栈数据传入当前栈中
        stack.push(x);
    }
    
    public void pop() {
        if(minStack.size()==0){//如果栈为空，直接返回
            return;
        }
        //否则同步弹出即可
        stack.pop();
        minStack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int min() {
        return minStack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.min();
 */
