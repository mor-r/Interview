/*
输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。

示例 1：
输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]

示例 2：
输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]
 
限制：
0 <= matrix.length <= 100
0 <= matrix[i].length <= 100
*/

class Solution {
    public int[] spiralOrder(int[][] matrix) {
        if(matrix.length==0){
            return new int[0];
        }
        int above=0,below=matrix.length-1,left=0,right=matrix[0].length-1,x=0;
        int[] res=new int[(below+1)*(right+1)];
        while(true){
            //从左到右
            for(int i=left;i<=right;i++){
                res[x++]=matrix[above][i];
            }
            if(++above > below){
                break;
            }
            //从上到下
            for(int i=above;i<=below;i++){
                res[x++]=matrix[i][right];
            }
            if(--right < left){
                break;
            }
            //从右到左
            for(int i=right;i>=left;i--){
                res[x++]=matrix[below][i];
            }
            if(--below < above){
                break;
            }
            //从下到上
            for(int i=below;i>=above;i--){
                res[x++]=matrix[i][left];
            }
            if(++left > right){
                break;
            }
        }
        return res;
    }
}
